Based on your project structure, here is a complete list of **possible API endpoints** grouped by their corresponding router modules. These are inferred from your directory structure and typical practices in FastAPI applications.

---

## üîê `auth.py` ‚Äì Authentication APIs

```
POST   /auth/register                    # Register user with email OTP
POST   /auth/verify-otp                  # Verify OTP for registration
POST   /auth/login                       # Login and get JWT tokens
POST   /auth/refresh-token               # Get new access token via refresh
POST   /auth/logout                      # Invalidate session/logout
```

---

## üë§ `users.py` ‚Äì User Management

```
GET    /users/me                         # Get current user profile
PUT    /users/me                         # Update profile info
GET    /users                            # (Admin) List all users
GET    /users/{user_id}                 # (Admin) Get specific user
DELETE /users/{user_id}                 # (Admin) Delete a user
```

---

## üè† `rooms.py` ‚Äì Room Management

```
POST   /rooms                            # Create a new room
GET    /rooms                            # List all rooms
GET    /rooms/{room_id}                 # Get details of a specific room
PUT    /rooms/{room_id}                 # Update room details
DELETE /rooms/{room_id}                 # Delete a room
```

---

## üì∂ `devices.py` ‚Äì Device Management

```
POST   /devices                          # Register a new device
GET    /devices                          # List all devices
GET    /devices/{device_id}             # Get device info
PUT    /devices/{device_id}             # Update device metadata/status
DELETE /devices/{device_id}             # Remove a device

GET    /devices/{device_id}/heartbeat   # Get latest heartbeat
GET    /devices/{device_id}/status      # Get online/offline status
```

---

## üå°Ô∏è `sensors.py` ‚Äì Sensor Data

```
POST   /sensors/data                     # Receive new sensor telemetry
GET    /sensors/data                     # Query all sensor data
GET    /sensors/data/{device_id}        # Get sensor data for a device
GET    /sensors/latest/{device_id}      # Get latest reading per sensor/device
```

---

## üß¨ `nimble.py` ‚Äì BLE Setup (Wi-Fi Provisioning via BLE)

```
GET    /ble/devices                     # Scan for nearby BLE devices
POST   /ble/provision                   # Send Wi-Fi credentials to selected device
```

---

### Socket.IO (Under `/socketio/manager.py`)

These are **Socket.IO events**, not HTTP routes:

* `connect`, `disconnect`
* `join_room`, `leave_room`
* `sensor_update` ‚Üí emitted on sensor data arrival
* `device_status` ‚Üí real-time heartbeat or online/offline status

---

## Background Task (heartbeat\_checker.py)

Not an endpoint, but relevant tasks:

* Periodic check if devices are sending heartbeats
* Emit `device_status` via Socket.IO

---

## Additional (Optional/Future)

If you support control (actuators):

```
POST   /devices/{device_id}/control     # Send command to device (e.g. turn on fan)
```

---

Let me know if you'd like an **OpenAPI (Swagger-style)** version or the **actual route decorators** (`@router.post`, etc.) filled in for your FastAPI codebase.
